name: DEBUG Detallado del Env√≠o

on:
  workflow_dispatch:

env:
  BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  debug:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Debug completo
      run: |
        cat > debug-detallado.js << 'EOF'
        const https = require('https');
        
        const CONFIG = {
          BOT_TOKEN: process.env.BOT_TOKEN,
          CHAT_ID: process.env.CHAT_ID,
          ENDPOINT: "https://sige.gva.es/qsige.localizador/citaPrevia/disponible/centro/82/servicio/265/calendario"
        };
        
        console.log('üîç CONFIGURACI√ìN:');
        console.log('   BOT_TOKEN:', CONFIG.BOT_TOKEN ? '‚úÖ Presente' : '‚ùå Faltante');
        console.log('   CHAT_ID:', CONFIG.CHAT_ID || '‚ùå Faltante');
        console.log('   ENDPOINT:', CONFIG.ENDPOINT);
        console.log('');
        
        // FUNCI√ìN MEJORADA para enviar a Telegram
        async function sendTelegram(message) {
          console.log('üì§ Intentando enviar a Telegram...');
          console.log('   Mensaje:', message.substring(0, 100) + '...');
          
          return new Promise((resolve, reject) => {
            const data = JSON.stringify({
              chat_id: CONFIG.CHAT_ID,
              text: message,
              parse_mode: 'HTML'
            });
            
            console.log('   JSON Data:', data.substring(0, 150) + '...');
            
            const options = {
              hostname: 'api.telegram.org',
              port: 443,
              path: `/bot${CONFIG.BOT_TOKEN}/sendMessage`,
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(data)
              }
            };
            
            console.log('   Opciones:', {
              hostname: options.hostname,
              path: options.path.substring(0, 50) + '...',
              method: options.method
            });
            
            const req = https.request(options, (res) => {
              let responseData = '';
              
              console.log('   üì° Respuesta HTTP:', res.statusCode);
              console.log('   üìã Headers:', res.headers);
              
              res.on('data', (chunk) => {
                responseData += chunk;
              });
              
              res.on('end', () => {
                console.log('   üìÑ Respuesta COMPLETA:', responseData);
                
                if (res.statusCode === 200) {
                  console.log('   ‚úÖ Telegram: Mensaje APARENTEMENTE enviado');
                  resolve(true);
                } else {
                  console.log('   ‚ùå Telegram: Error en respuesta');
                  resolve(false);
                }
              });
            });
            
            req.on('error', (error) => {
              console.log('   ‚ùå Telegram: Error de conexi√≥n:', error.message);
              resolve(false);
            });
            
            req.on('timeout', () => {
              console.log('   ‚ùå Telegram: Timeout');
              req.destroy();
              resolve(false);
            });
            
            req.setTimeout(10000);
            req.write(data);
            req.end();
          });
        }
        
        // Verificar disponibilidad (SIMULADA para prueba)
        async function simulateAvailabilityCheck() {
          console.log('üîç Simulando verificaci√≥n de disponibilidad...');
          
          // Simulamos que encontramos 5 d√≠as disponibles
          const availableDays = [
            { dia: '2025-10-01', estado: 0 },
            { dia: '2025-10-02', estado: 0 },
            { dia: '2025-10-03', estado: 0 },
            { dia: '2025-10-04', estado: 0 },
            { dia: '2025-10-05', estado: 0 }
          ];
          
          return {
            available: true,
            days: availableDays,
            total: availableDays.length
          };
        }
        
        // Funci√≥n principal
        async function main() {
          try {
            console.log('üöÄ INICIANDO DEBUG DETALLADO');
            console.log('‚è∞', new Date().toUTCString());
            console.log('');
            
            // 1. Simular encontrar disponibilidad
            const result = await simulateAvailabilityCheck();
            
            if (result.available) {
              console.log(`‚úÖ Simulaci√≥n: ${result.total} d√≠as disponibles`);
              
              // Crear mensaje de prueba
              const message = `üö® <b>CITA DISPONIBLE - PRUEBA</b>%0A%0Aüìã <b>Servicio:</b> Registro Civil Torrevieja%0AüìÖ <b>D√≠as disponibles:</b> ${result.total}%0A‚è∞ <b>Hora:</b> ${new Date().toUTCString()}%0A%0A<b>Este es un mensaje de PRUEBA</b>%0A%0A¬°Si recibes esto, el problema est√° en el mensaje real!`;
              
              // 2. Intentar enviar
              const sent = await sendTelegram(message);
              
              console.log('');
              if (sent) {
                console.log('üéâ RESULTADO: Mensaje marcado como "enviado"');
                console.log('‚ùì Pero si no lleg√≥, hay un problema silencioso');
              } else {
                console.log('‚ùå RESULTADO: Fall√≥ el env√≠o');
              }
            }
            
          } catch (error) {
            console.log('‚ùå ERROR:', error.message);
          }
        }
        
        main();
        EOF

    - name: Ejecutar debug detallado
      run: node debug-detallado.js
