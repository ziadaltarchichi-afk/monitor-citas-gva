name: Monitor de Citas GVA - FUNCIONANDO

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Crear script FUNCIONANDO
      run: |
        cat > monitor.js << 'EOF'
        const https = require('https');
        
        const CONFIG = {
          BOT_TOKEN: process.env.BOT_TOKEN,
          CHAT_ID: process.env.CHAT_ID,
          ENDPOINT: 'https://sige.gva.es/qsige.localizador/citaPrevia/disponible/centro/79/servicio/284/calendario'
        };
        
        async function sendTelegram(message) {
          return new Promise((resolve, reject) => {
            const data = JSON.stringify({
              chat_id: CONFIG.CHAT_ID,
              text: message,
              parse_mode: 'HTML'
            });
        
            const options = {
              hostname: 'api.telegram.org',
              port: 443,
              path: `/bot${CONFIG.BOT_TOKEN}/sendMessage`,
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(data)
              }
            };
        
            const req = https.request(options, (res) => {
              let responseData = '';
              res.on('data', chunk => responseData += chunk);
              res.on('end', () => {
                if (res.statusCode === 200) {
                  console.log('✅ Mensaje enviado a Telegram');
                  resolve(true);
                } else {
                  console.log('❌ Error Telegram:', responseData);
                  resolve(false);
                }
              });
            });
        
            req.on('error', (error) => {
              console.error('❌ Error de conexión:', error);
              resolve(false);
            });
            
            req.write(data);
            req.end();
          });
        }
        
        async function checkAvailability() {
          return new Promise((resolve, reject) => {
            console.log('🔍 Verificando endpoint con disponibilidad...');
            
            https.get(CONFIG.ENDPOINT, { 
              headers: { 
                'User-Agent': 'Mozilla/5.0',
                'Accept': 'application/json'
              },
              timeout: 10000
            }, (res) => {
              let data = '';
              
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const jsonData = JSON.parse(data);
                  
                  // Buscar días con estado 0 (disponibles)
                  const availableDays = jsonData.dias.filter(dia => dia.estado === 0);
                  
                  if (availableDays.length > 0) {
                    console.log(`✅ Encontrados ${availableDays.length} días disponibles`);
                    resolve({
                      available: true,
                      days: availableDays,
                      total: availableDays.length
                    });
                  } else {
                    console.log('❌ No hay días disponibles (estado 0)');
                    resolve({
                      available: false,
                      days: [],
                      total: 0
                    });
                  }
                } catch (error) {
                  reject(new Error(`Error parseando JSON: ${error.message}`));
                }
              });
            }).on('error', (error) => {
              reject(new Error(`Error de conexión: ${error.message}`));
            });
          });
        }
        
        async function main() {
          try {
            console.log('🚀 Iniciando monitor de citas...');
            console.log('⏰', new Date().toUTCString());
            console.log('🔗 Endpoint:', CONFIG.ENDPOINT);
            
            const result = await checkAvailability();
            
            if (result.available) {
              // Crear lista de días
              const daysList = result.days
                .slice(0, 10) // Máximo 10 días
                .map(dia => {
                  const date = new Date(dia.dia);
                  return `• ${date.toLocaleDateString('es-ES')}`;
                })
                .join('\n');
              
              // Mensaje CORREGIDO con saltos de línea reales
              const message = `🚨 <b>CITA DISPONIBLE ENCONTRADA</b>\n\n📋 <b>Servicio:</b> Registro Civil\n📅 <b>Días disponibles:</b> ${result.total}\n⏰ <b>Hora:</b> ${new Date().toUTCString()}\n\n<b>Próximos días:</b>\n${daysList}\n\n¡Date prisa en reservar!`;
              
              console.log('📤 Enviando mensaje...');
              const sent = await sendTelegram(message);
              
              if (sent) {
                console.log(`🎉 Alerta enviada correctamente - ${result.total} días disponibles`);
              } else {
                console.log('❌ Falló el envío a Telegram');
              }
            } else {
              console.log('ℹ️ No hay citas disponibles en este momento');
            }
            
          } catch (error) {
            console.error('❌ Error en el monitor:', error.message);
          }
        }
        
        main();
        EOF

    - name: Ejecutar monitor FUNCIONANDO
      run: node monitor.js
      
    - name: Log final
      run: echo "✅ Proceso completado - $(date -u)"
